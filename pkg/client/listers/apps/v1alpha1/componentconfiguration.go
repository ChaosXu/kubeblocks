/*
Copyright (C) 2022-2024 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComponentConfigurationLister helps list ComponentConfigurations.
// All objects returned here must be treated as read-only.
type ComponentConfigurationLister interface {
	// List lists all ComponentConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ComponentConfiguration, err error)
	// ComponentConfigurations returns an object that can list and get ComponentConfigurations.
	ComponentConfigurations(namespace string) ComponentConfigurationNamespaceLister
	ComponentConfigurationListerExpansion
}

// componentConfigurationLister implements the ComponentConfigurationLister interface.
type componentConfigurationLister struct {
	indexer cache.Indexer
}

// NewComponentConfigurationLister returns a new ComponentConfigurationLister.
func NewComponentConfigurationLister(indexer cache.Indexer) ComponentConfigurationLister {
	return &componentConfigurationLister{indexer: indexer}
}

// List lists all ComponentConfigurations in the indexer.
func (s *componentConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.ComponentConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComponentConfiguration))
	})
	return ret, err
}

// ComponentConfigurations returns an object that can list and get ComponentConfigurations.
func (s *componentConfigurationLister) ComponentConfigurations(namespace string) ComponentConfigurationNamespaceLister {
	return componentConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComponentConfigurationNamespaceLister helps list and get ComponentConfigurations.
// All objects returned here must be treated as read-only.
type ComponentConfigurationNamespaceLister interface {
	// List lists all ComponentConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ComponentConfiguration, err error)
	// Get retrieves the ComponentConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ComponentConfiguration, error)
	ComponentConfigurationNamespaceListerExpansion
}

// componentConfigurationNamespaceLister implements the ComponentConfigurationNamespaceLister
// interface.
type componentConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComponentConfigurations in the indexer for a given namespace.
func (s componentConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComponentConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComponentConfiguration))
	})
	return ret, err
}

// Get retrieves the ComponentConfiguration from the indexer for a given namespace and name.
func (s componentConfigurationNamespaceLister) Get(name string) (*v1alpha1.ComponentConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("componentconfiguration"), name)
	}
	return obj.(*v1alpha1.ComponentConfiguration), nil
}
